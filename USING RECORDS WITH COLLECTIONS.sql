/*=========================================================================================================
|  Title:         USING RECORDS WITH COLLECTIONS 
|  Description:   HOW RECORDS CAN BE USED WITH THE COLLECTIONS.
|  Author:        Adil Khan Rumi
|  Date Created:  27-DEC-2024
|  Last Updated:  -DEC-2024
|  Version:       19.0
|
|  Notes:         
|  - Ensure compatibility with Oracle 19c.
|  - The EMPLOYEES and DEPARTMENTS tables must exist in the schema.
===========================================================================================================
*/
SET SERVEROUTPUT ON;
/
DECLARE
    TYPE COL_REC IS TABLE OF EMPLOYEES%ROWTYPE INDEX BY VARCHAR2(100); --- AN ARRAY OF A WHOLE ROW 
    EMPS COL_REC;
    
    V_INDEX EMPLOYEES.EMAIL%TYPE;
BEGIN
    FOR I IN 100 .. 110
    LOOP
        SELECT * INTO EMPS(I) FROM EMPLOYEES WHERE EMPLOYEE_ID = I;
    END LOOP;
    
    V_INDEX := EMPS.FIRST;
    
    WHILE V_INDEX IS NOT NULL
    LOOP
        DBMS_OUTPUT.PUT_LINE(EMPS(V_INDEX).FIRST_NAME);
        V_INDEX := EMPS.NEXT(V_INDEX);
    END LOOP;
END;
/
---- ### USING ASSOCIATIVE ARRAY AS A RECORDS AND INSERT THE DATA INTO THE TABLE ....
CREATE TABLE RECORDS_COLLECTIONS AS SELECT EMPLOYEE_ID,FIRST_NAME, LAST_NAME, HIRE_DATE,SALARY,DEPARTMENT_ID FROM EMPLOYEES WHERE 1=2;
/
DECLARE
    TYPE RECS_COLLECS IS TABLE OF EMPLOYEES%ROWTYPE INDEX BY VARCHAR2(100);
    
    EMPS RECS_COLLECS;
    V_INDEX VARCHAR2(100);
    
BEGIN
    FOR I IN 116 .. 200 
    LOOP
        SELECT * INTO EMPS(I) FROM EMPLOYEES WHERE EMPLOYEE_ID = I;
    END LOOP;
    
    V_INDEX := EMPS.FIRST;
    
    WHILE V_INDEX IS NOT NULL
    LOOP
        INSERT INTO RECORDS_COLLECTIONS(EMPLOYEE_ID,FIRST_NAME, LAST_NAME, HIRE_DATE,SALARY,DEPARTMENT_ID)
        VALUES(V_INDEX||''||EMPS(V_INDEX).EMPLOYEE_ID,EMPS(V_INDEX).FIRST_NAME,EMPS(V_INDEX).LAST_NAME,EMPS(V_INDEX).HIRE_DATE,EMPS(V_INDEX).SALARY,EMPS(V_INDEX).DEPARTMENT_ID);
        
        V_INDEX := EMPS.NEXT(V_INDEX);
    END LOOP;
END;
/

SELECT * FROM RECORDS_COLLECTIONS;
-- DELETE FROM RECORDS_COLLECTIONS WHERE DEPARTMENT_ID IS NULL
/

-----##### USING RECORD AND USE IN A COLLECTION AND PRINT THE DBMS_OUTPUT....
SET SERVEROUTPUT ON;
/
DECLARE
    TYPE V_RECORD IS RECORD (FIRST_NAME EMPLOYEES.FIRST_NAME%TYPE,
                              LAST_NAME EMPLOYEES.LAST_NAME%TYPE
                            );
    TYPE V_COLLECS IS TABLE OF V_RECORD INDEX BY PLS_INTEGER;
    
    V_EMPS V_COLLECS;
    V_INDEX PLS_INTEGER := 1;
    
BEGIN
    FOR I IN  100 .. 110
    LOOP
        SELECT FIRST_NAME, LAST_NAME INTO V_EMPS(I) FROM EMPLOYEES WHERE EMPLOYEE_ID = I;
    END LOOP;
    --V_EMPS.DELETE(100); -- DELETE ANY EMPLOYEE
    --V_EMPS.DELETE(100,104,105); --DELETE LIST OF EMPLOYEE IN A ONE SHOT
    
    V_INDEX := V_EMPS.FIRST;
    
    WHILE V_INDEX IS NOT NULL
    LOOP
        DBMS_OUTPUT.PUT_LINE(V_EMPS(V_INDEX).FIRST_NAME || '' || V_EMPS(V_INDEX).LAST_NAME);
        V_INDEX := V_EMPS.NEXT(V_INDEX);
    END LOOP;
    
    ---- PRINTING THE OUTPUT IN REVERSE
--    V_INDEX := V_EMPS.LAST;
--    
--    WHILE V_INDEX IS NOT NULL
--    LOOP
--        DBMS_OUTPUT.PUT_LINE(V_EMPS(V_INDEX).FIRST_NAME || '' || V_EMPS(V_INDEX).LAST_NAME);
--        V_INDEX := V_EMPS.PRIOR(V_INDEX);
--    END LOOP;
END;
/

------ #### POPULATING DATA INTO THE HISTORICAL TABLE USING ASSOCIATIVE ARRAY.

CREATE TABLE EMPS_HISTORY AS SELECT * FROM EMPLOYEES WHERE 1=2;
ALTER TABLE EMPS_HISTORY ADD CREATED_DATE DATE;
SELECT * FROM EMPS_HISTORY;
/
-- DECLARE SECTION
DECLARE
    TYPE V_HISTORY IS TABLE OF EMPS_HISTORY%ROWTYPE INDEX BY PLS_INTEGER;
    
    V_EMPS V_HISTORY; --INITIALIZE THE ASSOCIATIVE_ARRAY
    V_INDEX PLS_INTEGER; -- DECLARE THE INDEX 
    
-- BEGIN BLOCK
BEGIN
    FOR I IN 100 .. 120  -- LOOP FOR EMPLOYEES WITH EMPLOYEE_ID BETWEEN 100 TO 120
    LOOP
        SELECT E.*, '29-DEC-2024' INTO V_EMPS(I) FROM EMPLOYEES E WHERE EMPLOYEE_ID = I; -- SEELCT ALL THE RECORDS FROM EMPLOYEES TABLE WITH CREATED DATE ''29-DEC-2024
    END LOOP;
    
    V_INDEX := V_EMPS.FIRST; -- STARTING FROM THE FIRST INDEX 
    
    WHILE V_INDEX IS NOT NULL -- CHECK FOR THE DATA AVAILABLE AGAINST EACH INDEX WITH EMPLOYEE_ID
    LOOP
        V_EMPS(V_INDEX).SALARY := V_EMPS(V_INDEX).SALARY + V_EMPS(V_INDEX).SALARY*0.2; -- UPDATE THE SALARY
        INSERT INTO EMPS_HISTORY -- INSERTING INTO THE TABLE 
        VALUES V_EMPS(V_INDEX); --NEXT INDEX VALUE 
        
        DBMS_OUTPUT.PUT_LINE(V_EMPS(V_INDEX).LAST_NAME || ' HAS BEEN POPULATED IN TO THE HISTORICAL TABLE : EMPS_HISTORY' );
        V_INDEX := V_EMPS.NEXT(V_INDEX);
    END LOOP;
END ;
/

SELECT * FROM EMPS_HISTORY;


























    